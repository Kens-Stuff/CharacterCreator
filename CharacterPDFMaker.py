#Code generated by ChatGPT3.5
#reviewed and authorized by Ken Smith
#4/13/24
#DND character sheet PDF generator.
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer

# Standard skills and their corresponding ability scores
SKILLS = {
    "Acrobatics": "Dexterity",
    "Animal Handling": "Wisdom",
    "Arcana": "Intelligence",
    "Athletics": "Strength",
    "Deception": "Charisma",
    "History": "Intelligence",
    "Insight": "Wisdom",
    "Intimidation": "Charisma",
    "Investigation": "Intelligence",
    "Medicine": "Wisdom",
    "Nature": "Intelligence",
    "Perception": "Wisdom",
    "Performance": "Charisma",
    "Persuasion": "Charisma",
    "Religion": "Intelligence",
    "Sleight of Hand": "Dexterity",
    "Stealth": "Dexterity",
    "Survival": "Wisdom",
}

def create_character_sheet(file_name, character_info):
    # Create a SimpleDocTemplate object
    doc = SimpleDocTemplate(file_name, pagesize=letter)

    # Define styles for the document
    styles = getSampleStyleSheet()
    header_style = styles["Heading2"]
    body_style = styles["Normal"]
    attribute_style = ParagraphStyle(name='AttributeStyle', parent=body_style, textColor=colors.black, fontSize=12)

    # Define character sheet content
    content = []

    # Character Information Section
    content.append(Paragraph("Character Information", header_style))
    content.append(create_character_info_paragraph(character_info, attribute_style))
    content.append(Spacer(1, 20))  # Add space for writing Allegiance

    # Ability Scores Section
    content.append(Paragraph("Ability Scores", header_style))
    content.extend(create_ability_scores_paragraphs(character_info, attribute_style))
    content.append(Spacer(1, 20))  # Add space between sections

    # Skills Section
    content.append(Paragraph("Skills", header_style))
    content.extend(create_skills_paragraphs(character_info, attribute_style))
    content.append(Spacer(1, 20))  # Add space between sections

    # Status Section
    content.append(Paragraph("Status", header_style))
    content.extend(create_status_fields_paragraphs(character_info, attribute_style))
    content.append(Spacer(1, 20))  # Add space between sections

    # Build the document with the defined content
    doc.build(content)

def create_character_info_paragraph(character_info, style):
    info_text = f"<b>Character Name:</b> {character_info['Character Name']}    " \
                f"<b>Race:</b> {character_info['Race']}    " \
                f"<b>Class:</b> {character_info['Class']}<br/>" \
                f"<b>Allegiance:</b> {character_info['Allegiance']}<br/>"
    return Paragraph(info_text, style)

def create_ability_scores_paragraphs(character_info, style):
    paragraphs = []
    for key, value in character_info.items():
        if key in ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma", "Proficiency"]:
            paragraphs.append(Paragraph(f"<b>{key}:</b> {value}", style))
    return paragraphs

def create_skills_paragraphs(character_info, style):
    paragraphs = []
    for skill, ability in SKILLS.items():
        proficient = input(f"Are you proficient in {skill}? (y/n): ").strip().lower()
        proficiency_bonus = character_info.get("Proficiency", 0) if proficient == "y" else 0
        ability_score = character_info.get(ability, 10)  # Default to 10 if ability score is not provided
        modifier = (ability_score - 10) // 2 + proficiency_bonus
        paragraphs.append(Paragraph(f"<b>{skill}:</b> {modifier}", style))
    return paragraphs

def create_status_fields_paragraphs(character_info, style):
    status_fields = ["AC", "Initiative", "Speed", "Current HP", "Temporary HP", "Death Saves"]
    paragraphs = []
    
    # Calculate Initiative
    dexterity = character_info.get("Dexterity", 10)  # Default to 10 if Dexterity is not provided
    initiative = (dexterity - 10) / 2
    
    character_info["Initiative"] = initiative
    
    # Create paragraphs for each status field
    for field in status_fields:
        paragraphs.append(Paragraph(f"<b>{field}:</b> {character_info.get(field, '')}", style))
    return paragraphs

def get_character_info_from_user():
    character_info = {}
    required_fields = ["Character Name", "Race", "Class", "Allegiance"]
    ability_scores = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma", "Proficiency"]
    
    # Prompt for required fields
    for field in required_fields:
        while True:
            user_input = input(f"Enter {field}: ").strip()
            if user_input:
                character_info[field] = user_input
                break
            else:
                print(f"{field} cannot be empty. Please enter a value.")

    # Prompt for ability scores
    for score in ability_scores:
        while True:
            user_input = input(f"Enter {score} score (1-25): ").strip()
            if user_input.isdigit():
                score_value = int(user_input)
                if score != "Proficiency":
                    if 1 <= score_value <= 25:
                        character_info[score] = score_value
                        break
                    else:
                        print(f"{score} score must be between 1 and 25.")
                else:
                    if 1 <= score_value <= 5:
                        character_info[score] = score_value
                        break
                    else:
                        print(f"Proficiency score must be between 1 and 5.")
            else:
                print("Please enter a valid number.")

    # Prompt for AC, Speed, and Current HP
    for field in ["AC", "Speed", "Current HP"]:
        user_input = input(f"Enter {field}: ").strip()
        character_info[field] = user_input

    return character_info

def create_from_input():
    character_info = get_character_info_from_user()
    file_name = f"{character_info['Character Name'].replace(' ', '_')}_character_sheet.pdf"
    create_character_sheet(file_name, character_info)
    print(f"Character sheet created successfully: {file_name}")

# Uncomment the following line to test the create_from_input() function
# create_from_input()
